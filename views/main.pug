html 
head 
title=title 
style.
      .sticky-header  {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        padding: 50px;
        font-size: 20px;
      }
  .table-container {
    max-height: 400px;
    overflow-y: auto;
    position: absolute;
    width: 100%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
link(rel='stylesheet', href='w3.css', type='text/css')
link(rel='stylesheet', href='preloader.css', type='text/css')
link(rel='icon', href='data:;base64,iVBORw0KGgo=')
script(src="jquery.js")
script(src="https://code.jquery.com/jquery-3.6.0.min.js")
script.
  async function searchRecords() {
    const searchQuery = document.getElementById('searchQuery').value;
    // Використовуємо fetch API для звернення до сервера та отримання повного об'єкта за пошуковим запитом
    const response = await fetch('/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ searchQuery })
    });
    const data = await response.json();
    // Показуємо повний об'єкт у попередженні перед видаленням
    document.getElementById('deleteInfo').innerText = `Попередження перед видаленням: ${JSON.stringify(data, null, 2)}`;
    // Зберігаємо ID знайденого запису для використання в функції видалення
    document.getElementById('deleteInfo').setAttribute('data-id', data._id);
  }

  async function showDeleteConfirmation() {
    const searchQuery = document.getElementById('searchQuery').value;

    if (!searchQuery) {
      return alert('Поле пошуку не заповнене');
    }

    const response = await fetch('/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ searchQuery })
    });
    const data = await response.json();

    if (!data) {
      return alert('Запис не знайдено');
    }

    // Показуємо повідомлення перед видаленням з повним записом
    const confirmDelete = confirm(`Попередження перед видаленням:\n${JSON.stringify(data, null, 2)}\nВидалити запис?`);

    if (confirmDelete) {
      // Викликаємо функцію для видалення запису
      deleteRecord(data._id);
    }
  }

  async function deleteRecord(id) {
    const response = await fetch('/delete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ id })
    });

    const result = await response.json();

    alert(result.message);
    // Перезавантажуємо сторінку після видалення
    location.reload();
  }
script.
  function editUser(id) {
    const editForm = document.getElementById('editForm');
    editForm.action = '/update_user/' + id;
    const userElement = document.getElementById('user-' + id);
    const user = JSON.parse(userElement.getAttribute('data-user'));

    // Проверяем, что user не пустой объект, прежде чем заполнять поля формы
    if (user && Object.keys(user).length > 0) {
      editForm.elements.last.value = user.last || '';
      editForm.elements.first.value = user.first || '';
      editForm.elements.father.value = user.father || '';
      editForm.elements.org.value = user.org || '';
      editForm.elements.part.value = user.part || '';
      editForm.elements.phone.value = user.phone || '';
      editForm.elements.mail.value = user.mail || '';
      editForm.elements.birth.value = user.birth || '';
    } else {
      console.error('Дані користувача відсутні або не вірні.');
    }

    document.getElementById('id03').style.display = 'block';
  }

  function saveUser(id) {
    // Отримуємо значення полів з модального вікна
    var last = document.getElementById('last').value;
    var first = document.getElementById('first').value;
    var father = document.getElementById('father').value;
    var org = document.getElementById('org').value;
    var part = document.getElementById('part').value;
    var phone = document.getElementById('phone').value;
    var mail = document.getElementById('mail').value;
    var birth = document.getElementById('birth').value;

    // Формуємо об'єкт з новими даними користувача
    var updatedUser = {
      last: last,
      first: first,
      father: father,
      org: org,
      part: part,
      phone: phone,
      mail: mail,
      birth: birth
    };

    // Виконуємо AJAX запит на сервер для оновлення даних користувача
    $.ajax({
      url: '/update_user/' + id, // Використовуємо id в URL
      type: 'POST',
      data: updatedUser,
      success: function(data) {
        // Успішно оновлено дані користувача
        console.log('Дані користувача успішно оновлено:', data);

        // Закриваємо модальне вікно
        document.getElementById('id03').style.display = 'none';

        // Оновлюємо відповідний рядок в таблиці з оновленими даними
        updateTableRow(id, updatedUser);
      },
      error: function(err) {
        console.error('Помилка при оновленні даних користувача:', err);
      }
    });
  }

  // Функція для оновлення даних відповідного рядка в таблиці
  function updateTableRow(id, data) {
    const row = document.getElementById('user-' + id);
    row.querySelector('td:nth-child(1)').textContent = data.last;
    row.querySelector('td:nth-child(2)').textContent = data.first;
    row.querySelector('td:nth-child(3)').textContent = data.father;
    row.querySelector('td:nth-child(4)').textContent = data.org;
    row.querySelector('td:nth-child(5)').textContent = data.part;
    row.querySelector('td:nth-child(6)').textContent = data.phone;
    row.querySelector('td:nth-child(7)').textContent = data.mail;
    row.querySelector('td:nth-child(8)').textContent = data.birth;
  }

  async function searchRecords(searchQuery) {
    try {
      if (searchQuery.trim() === '') {
        // Якщо поле пошуку порожнє, оновлюємо таблицю з всіма записами
        updateTable(allRecords);
      } else {
        // Виконуємо AJAX запит на сервер для пошуку
        const response = await fetch('/searchMain', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ searchQuery })
        });

        const records = await response.json();

        // Оновлюємо таблицю з результатами пошуку на стороні клієнта
        updateTable(records);
      }
    } catch (error) {
      console.error('Помилка при пошуку записів:', error);
    }
  }

  // Функція для оновлення таблиці з результатами пошуку
  function updateTable(records) {
    const tableRows = document.querySelectorAll('tbody tr');

    tableRows.forEach(row => {
      const user = JSON.parse(row.getAttribute('data-user'));
      const isVisible = records.some(record => {
        return record._id === user._id;
      });

      if (!isVisible) {
        row.style.display = 'none'; // Приховуємо непотрібний рядок таблиці
      } else {
        row.style.display = ''; // Відображаємо знайдений рядок
      }
    });
  }

  let allRecords = [];

  window.onload = async function () {
    // Виконуємо AJAX запит на сервер для отримання всіх записів
    try {
      const response = await fetch('/get_all_records');
      allRecords = await response.json();
      // Оновлюємо таблицю з отриманими записами
      updateTable(allRecords);
    } catch (error) {
      console.error('Помилка при отриманні всіх записів:', error);
    }

    // Приховуємо preloader після завантаження через 10 секунд
    setTimeout(hidePreloader, 10000);
  };

  function hidePreloader() {
    document.getElementById('preloader').style.display = 'none';
  }

  function editRecord(userId) {
    // Отримуємо дані користувача за його ID
    fetch(`/get_user/${userId}`)
      .then((response) => response.json())
      .then((data) => {
        // Заповнюємо поля модального вікна даними користувача
        document.getElementById('edit-last').value = data.last;
        document.getElementById('edit-first').value = data.first;
        document.getElementById('edit-father').value = data.father;
        document.getElementById('edit-org').value = data.org;
        document.getElementById('edit-part').value = data.part;
        document.getElementById('edit-phone').value = data.phone;
        document.getElementById('edit-mail').value = data.mail;
        document.getElementById('edit-birth').value = data.birth;

        // Зберігаємо ID редагованого запису для подальшого використання
        document.getElementById('edit-record-id').value = data._id;
      })
      .catch((error) => console.error('Помилка отримання даних користувача:', error));

    // Відкриваємо модальне вікно редагування
    document.getElementById('editModal').style.display = 'block';
  }

script.
  function closeEditModal() {
    document.getElementById('editModal').style.display = 'none';
  }
script.
  function updateRecord(event) {
    event.preventDefault();

    const form = document.getElementById('editForm');
    const formData = new FormData(form);
    const recordId = formData.get('id');

    fetch(`/update_user/${recordId}`, {
      method: 'POST',
      body: formData,
    })
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
        // Закриваємо модальне вікно редагування після збереження запису
        closeEditModal();
        // Перезавантажуємо сторінку, щоб оновити таблицю
        location.reload();
      })
      .catch((error) => console.error('Помилка оновлення даних користувача:', error));
  }
script.
  function deleteRecord(recordId) {
    fetch(`/delete`, {
      method: 'POST',
      body: JSON.stringify({ id: recordId }),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
        // Перезавантажуємо сторінку, щоб оновити таблицю
        location.reload();
      })
      .catch((error) => console.error('Помилка видалення запису:', error));
  }

script.
  async function updateRecord(event) {
    event.preventDefault();

    const form = document.getElementById('editForm');
    const formData = new FormData(form);
    const recordId = formData.get('id');

    if (!recordId) {
      return console.error('Не вказано ID запису для оновлення');
    }

    try {
      // Отримуємо дані користувача за його ID
      const response = await fetch(`/get_user/${recordId}`);
      const user = await response.json();

      // Оновлюємо дані користувача з даними з полів форми
      user.last = formData.get('last');
      user.first = formData.get('first');
      user.father = formData.get('father');
      user.org = formData.get('org');
      user.part = formData.get('part');
      user.phone = formData.get('phone');
      user.mail = formData.get('mail');
      user.birth = formData.get('birth');

      // Виконуємо AJAX запит на сервер для оновлення даних користувача
      const updateResponse = await fetch(`/update_user/${recordId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(user),
      });

      const data = await updateResponse.json();
      console.log(data);

      // Закриваємо модальне вікно редагування після збереження запису
      closeEditModal();

      // Перезавантажуємо сторінку, щоб оновити таблицю
      location.reload();
    } catch (error) {
      console.error('Помилка оновлення даних користувача:', error);
    }
  }



body
#preloader
  .loader


div
    div.w3-panel.w3-light-gray
        div.div.w3-custom-grid
            button.w3-button.w3-round-xxlarge.w3-margin.w3-pale-green(style='width: 12%;', onclick="document.getElementById('id01').style.display='block'")
                p Додати запис
            div#id01.w3-modal
                div.w3-modal-content
                    div.w3-container
                        span.w3-button.w3-display-topright(onclick="document.getElementById('id01').style.display='none'") &times;
                        form.w3-container.w3-card-4(action="/add", method="POST")
                            h2.w3-text-blue Додавання запису
                            p Форма для заповнення нового запису в довідник
                            p
                                label.w3-text-blue(for="last") Прізвище
                                input.w3-input.w3-border(name="last", type="text")
                            p
                                label.w3-text-blue(for="first") Ім'я
                                input.w3-input.w3-border(name="first", type="text")
                            p
                                label.w3-text-blue(for="father") По батькові
                                input.w3-input.w3-border(name="father", type="text")
                            p
                                label.w3-text-blue(for="org") Організація
                                input.w3-input.w3-border(name="org", type="text")
                            p
                                label.w3-text-blue(for="part") Відділ
                                input.w3-input.w3-border(name="part", type="text")
                            p
                                label.w3-text-blue(for="phone") Номер телефону
                                input.w3-input.w3-border(name="phone", type="text")
                            p
                                label.w3-text-blue(for="mail") E-mail
                                input.w3-input.w3-border(name="mail", type="email")
                            p
                                label.w3-text-blue(for="birth") Дата народження
                                input#datepicker.w3-input.w3-border(name="birth", type="date")
                            p
                                button.w3-btn.w3-blue(type="submit") Додати новий запис



            button.w3-button.w3-round-xxlarge.w3-margin.w3-pale-red(style='width: 12%;', onclick="document.getElementById('id02').style.display='block'")
                p Видалити запис
            div#id02.w3-modal
                div.w3-modal-content
                    div.w3-container
                        span.w3-button.w3-display-topright(onclick="document.getElementById('id02').style.display='none'") &times;
                        form.w3-container.w3-card-4(id="searchForm")
                            div.w3-input.w3-border.w3-padding
                                input(type='text', placeholder='Пошук...', style='width: 100%;', id='searchQuery')
                        button.w3-button.w3-round-xxlarge.w3-margin.w3-pale-red(onclick="showDeleteConfirmation()")
                            p Видалити запис
                        div#id02.w3-modal
                            div.w3-modal-content
                                div.w3-container
                                    span.w3-button.w3-display-topright(onclick="document.getElementById('id02').style.display='none'") &times;
                                        #deleteInfo.w3-panel.w3-red(style='margin-top: 10px; padding: 10px;')

            div.w3-button.w3-round-xxlarge.w3-margin.w3-right(style='width: 40%;')
                div.w3-input.w3-border.w3-padding
                    input(type='text', placeholder='Пошук...', style='width: 100%;', oninput='searchRecords(this.value)')
div.table-container.w3-display-container.w3-display-middle
    div.w3-table-all.w3-threequarter(style='max-height: 400px; overflow-y: auto; margin-left: 12%;')
        table(style='width: 100%;; table-layout: fixed;')
            thead
                tr
                    th Прізвище
                    th Ім'я
                    th По батькові
                    th Організація
                    th Відділ
                    th Номер телефону
                    th E-mail
                    th Дата народження
            tbody
                each user in users  
                    tr(id=`user-${user._id}`, data-user=JSON.stringify(user))
                        td(style='word-wrap: break-word;')= user.last
                        td(style='word-wrap: break-word;')= user.first
                        td(style='word-wrap: break-word;')= user.father
                        td(style='word-wrap: break-word;')= user.org
                        td(style='word-wrap: break-word;')= user.part
                        td(style='word-wrap: break-word;')= user.phone
                        td(style='word-wrap: break-word;')= user.mail
                        td(style='word-wrap: break-word;')= user.birth
                        td
                            button.w3-btn.w3-yellow.w3-round-xxlarge(onclick=`editRecord('${user._id}')`) Редагувати

#editModal.w3-modal
  .w3-modal-content.w3-card-4.w3-animate-opacity
    .w3-container
      span.w3-button.w3-display-topright.w3-red(onclick='closeEditModal()') &times;
      h2 Редагувати запис
      form#editForm.w3-container.w3-margin-top(onsubmit='updateRecord(event)')
        input#edit-record-id(type='hidden' name='id')
        p
          label(for='edit-last') Прізвище:
          input#edit-last.w3-input.w3-border(type='text' name='last' required)
        p
          label(for='edit-first') Ім'я:
          input#edit-first.w3-input.w3-border(type='text' name='first' required)
        p
          label(for='edit-father') По батькові:
          input#edit-father.w3-input.w3-border(type='text' name='father')
        p
          label(for='edit-org') Організація:
          input#edit-org.w3-input.w3-border(type='text' name='org' required)
        p
          label(for='edit-part') Відділ:
          input#edit-part.w3-input.w3-border(type='text' name='part')
        p
          label(for='edit-phone') Телефон:
          input#edit-phone.w3-input.w3-border(type='text' name='phone' required)
        p
          label(for='edit-mail') Email:
          input#edit-mail.w3-input.w3-border(type='email' name='mail' required)
        p
          label(for='edit-birth') Дата народження:
          input#edit-birth.w3-input.w3-border(type='date' name='birth' required)
        button.w3-btn.w3-blue(type='submit') Зберегти запис









